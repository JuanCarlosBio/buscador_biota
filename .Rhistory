while(1){print("Hola mundo")}
main <- function(){
x = 0
y = 1
while(x < 255){
print(x)
z = x + y
x = y
y = z
}
}
main()
main <- function(){
x = 0
y = 1
vec <- c()
while(x < 255){
loop <- print(x)
vec <- c(vec, x)
z = x + y
x = y
y = z
}
}
main()
vec
return(vec)
main <- function(){
x = 0
y = 1
vec <- c()
while(x < 255){
loop <- print(x)
vec <- c(vec, x)
z = x + y
x = y
y = z
}
return(vec)
}
main()
vec
print(x)
main <- function(){
x = 0
y = 1
vec <- c()
while(x < 255){
print(x)
vec <- c(vec, x)
z = x + y
x = y
y = z
}
return(vec)
}
main()
resultado <- main()
vec
resultado <- main()
resultado
main <- function(numero){
x = 0
y = 1
vec <- c()
while(x < numero){
print(x)
vec <- c(vec, x)
z = x + y
x = y
y = z
}
return(vec)
}
resultado <- main(10000)
resultado
resultado <- main(10*1000)
resultado
resultado <- main(10^6)
resultado <- main(10^100)
resultado <- main(10^100000)
resultado <- main(10^90)
resultado
resultado <- main(10^1000000000000)
resultado
plot(resultado)
# Plot the vector
plot(x, type = "o", col = "blue", main = "Plot of Vector x", xlab = "Index", ylab = "Value")
# Plot the vector
plot(resultado, type = "o", col = "blue", main = "Plot of Vector x", xlab = "Index", ylab = "Value")
library(tidyverse)
biota_data_processed <- read_delim(
"C:/Users/jcge9/Documents/BiodiversidadGJC/data/biota/processed/biota_data_processed.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
biota_data_processed
## Leer la lista de las familias de ácaros
acaros_familias <- read_delim(
"C:/Users/jcge9/OneDrive/Escritorio/acaros_familias.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
View(acaros_familias)
## Leer la lista de las familias de ácaros
acaros_familias <- read_delim(
"C:/Users/jcge9/OneDrive/Escritorio/acaros_familias.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
acaros_familias
acaros_familias$familia_acaros
biota_data_processed %>%
filter(family == acaros_familias$familia_acaros)
## Leer la lista de las familias de ácaros
acaros_familias <- read_delim(
"C:/Users/jcge9/OneDrive/Escritorio/acaros_familias.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
biota_data_processed %>%
filter(family == acaros_familias$familia_acaros)
library(tidyverse)
## Leer los datos de Biota
biota_data_processed <- read_delim(
"C:/Users/jcge9/Documents/BiodiversidadGJC/data/biota/processed/biota_data_processed.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
## Leer la lista de las familias de ácaros
acaros_familias <- read_delim(
"C:/Users/jcge9/OneDrive/Escritorio/acaros_familias.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE
)
acaros_familias
biota_data_processed %>%
filter(family == "Siphlonuridae")
biota_data_processed %>%
filter(family == "Siphlonuridae")
biota_data_processed %>%
filter(family == "Baetoidea")
biota_data_processed %>%
filter(family == "efemenopterae")
biota_data_processed$family %>% sort() %>% unique()
str_detect(biota_data_processed$family %>%
sort() %>%
unique(), "Siph")
filter(biota_data_processed$family, str_detect(biota_data_processed$family %>%
sort() %>%
unique(), "Siph"))
filter(biota_data_processed$family %in% str_detect(biota_data_processed$family %>%
sort() %>%
unique(), "Siph"))
filtro <- str_detect(biota_data_processed$family %>%
sort() %>%
unique()
filter(biota_data_processed$family %in% , "Siph"))
filtro <- str_detect(biota_data_processed$family %>%
sort() %>%
unique()
filter(biota_data_processed$family %in% , "Siph"))
filtro <- str_detect(biota_data_processed$family %>%
filtro <- str_detect(biota_data_processed$family %>%
sort() %>%
unique())
break
filtro <- str_detect(biota_data_processed$family %>%
sort() %>%
unique())
filtro <- biota_data_processed$family %>%
sort() %>%
unique()
filtro
familia <- biota_data_processed$family %>%
sort() %>%
unique()
filter(familia %in% str_detect(famiolia, "Siph"))
filter(familia %in% str_detect(familia, "Siph"))
familia <- biota_data_processed$family %>%
sort() %>%
unique()
familia
filter(str_detect(familia, "Siph"))
filter(familia, str_detect(familia, "Siph"))
familia <- as.dataframe(biota_data_processed$family %>%
sort() %>%
unique())
familia
familia %>% colnames()
familia <- tibble(x = biota_data_processed$family %>%
sort() %>%
unique())
familia
familia %>%
filter(x, str_detect(familia, "Siph"))
familia %>%
filter(x, str_detect(x, "Siph"))
str_detect(x, "Siph")
str_detect(familia$x, "Siph")
str_detect(familia$x, "Siph") %>% class
familia %>%
filter(x, str_detect(x, "Siph"))
familia %>%
filter(str_detect(x, "Siph"))
biota_data_processed %>%
filter(family == "Baetidae")
biota_data_processed %>%
filter(family == "Baetidae") %>%
view()
biota_data_processed %>%
filter(order == "Ephemenptera") %>%
view()
biota_data_processed %>%
filter(order == "Ephemenoptera") %>%
view()
biota_data_processed %>%
filter(order == "Ephemeroptera") %>%
view()
library(sf)
library(tidyverse)
presa_santa_brigida <- read.delim2("C:/Users/jcge9/OneDrive/Escritorio/presa_santa_brigida.txt")
View(presa_santa_brigida)
presa_santa_brigida
presa_santa_brigida %>% st_as_sf(df, coords = c("LONG", "LAT"), crs = 4326)
presa_santa_brigida %>% st_as_sf(coords = c("LONG", "LAT"), crs = 4326)
st_as_sf(presa_santa_brigida, coords = c("X", "Y"), crs = 4326)
data %>% st_as_sf(presa_santa_brigida, coords = c("X", "Y"), crs = 4326)
data <- st_as_sf(presa_santa_brigida, coords = c("X", "Y"), crs = 4326)
data
data %>%
ggplot() %>%
geom_sf()
data %>%
ggplot() +
geom_sf()
data
data %>%
ggplot() +
geom_sf()
data <- st_as_sf(presa_santa_brigida, coords = c("X", "Y"), crs = 32628)
data
data %>%
ggplot() +
geom_sf()
line_data <- data %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("LINESTRING")
line_data %>%
ggplot() %>%
geom_sf()
line_data %>%
ggplot() +
geom_sf()
presa_santa_brigida
presa_santa_brigida[,]
presa_santa_brigida[-26,]
data <- st_as_sf(presa_santa_brigida[-26,], coords = c("X", "Y"), crs = 32628)
data %>%
ggplot() +
geom_sf()
line_data <- data %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("LINESTRING")
line_data %>%
ggplot() +
geom_sf()
getwd()
st_write(presa_santa_brigida_line, "presa_ruta", driver = "KML")
st_write(line_data, "presa_ruta", driver = "KML")
st_write(line_data, "C:\\Users\\jcge9/OneDrive\\Datos adjuntos de correo electrónico\\Documentos\\presa_ruta.kml", driver = "KML")
library(tidyverse)
library(shiny)
library(bslib)
library(glue)
library(htmltools)
link_biota <- "https://www.biodiversidadcanarias.es/biota/especie/"
# Cargar datos
biota_data <- read_tsv("data/processed/biota_data_processed.tsv") %>%
mutate(id_biota = glue("<br><a href={link_biota}{id_biota}>{id_biota}</a>"))
setwd("C:\\Users\\jcge9\\Documents\\buscador_biota")
library(tidyverse)
library(shiny)
library(bslib)
library(glue)
library(htmltools)
link_biota <- "https://www.biodiversidadcanarias.es/biota/especie/"
# Cargar datos
biota_data <- read_tsv("data/processed/biota_data_processed.tsv") %>%
mutate(id_biota = glue("<br><a href={link_biota}{id_biota}>{id_biota}</a>"))
View(biota_data)
biota_data$id_biota
# Cargar datos
biota_data <- read_tsv("data/processed/biota_data_processed.tsv") %>%
mutate(id_biota = glue("<br><a href={link_biota}{id_biota}>{id_biota}</a>") %>% lapply(HTML))
biota_data
biota_data$id_biota
link_biota <- "https://www.biodiversidadcanarias.es/biota/especie/"
# Cargar datos
biota_data <- read_tsv("data/processed/biota_data_processed.tsv") %>%
mutate(id_biota = glue("<br><a href={link_biota}{id_biota}>{id_biota}</a>") %>% lapply(HTML))
# Agregar opción "Todos" a cada filtro
opciones_scientific_name <- c("Todos", unique(biota_data$scientific_name))
opciones_family <- c("Todos", unique(biota_data$family))
opciones_order <- c("Todos", unique(biota_data$order))
opciones_class <- c("Todos", unique(biota_data$class))
opciones_subdivision <- c("Todos", unique(biota_data$subdivision))
opciones_division <- c("Todos", unique(biota_data$division))
opciones_phylo <- c("Todos", unique(biota_data$phylo))
opciones_domain <- c("Todos", unique(biota_data$domain))
# Definir UI
ui <- page_sidebar(
title = "TABLA PARA BUSCAR ESPECIES EN BIOTA FÁCIL",
sidebar = sidebar(
"Filtros",
selectInput("domain", "Selecciona un Reino:", opciones_domain, selected = "Todos"),
selectInput("phylo", "Selecciona un Filo:", opciones_phylo, selected = "Todos"),
selectInput("division", "Selecciona una División:", opciones_division, selected = "Todos"),
selectInput("subdivision", "Selecciona una Subdivisión:", opciones_subdivision, selected = "Todos"),
selectInput("class", "Selecciona una Clase:", opciones_class, selected = "Todos"),
selectInput("order", "Selecciona un orden:", opciones_order, selected = "Todos"),
selectInput("family", "Selecciona una familia:", opciones_family, selected = "Todos"),
selectInput("scientific_name", "Selecciona un nombre científico:", opciones_scientific_name, selected = "Todos")
),
"Especies de Biota, pertenecientes BIOCAN, Gobierno de Canarias",
card(
dataTableOutput("tabla_especies")
)
)
View(biota_data)
# Definir servidor
server <- function(input, output) {
filtered_data <- reactive({
data <- biota_data  # Usamos la base de datos original
# Aplicar los filtros solo si el usuario ha seleccionado una opción diferente de "Todos"
if (input$domain != "Todos") data <- data %>% filter(domain == input$domain)
if (input$phylo != "Todos") data <- data %>% filter(phylo == input$phylo)
if (input$division != "Todos") data <- data %>% filter(division == input$division)
if (input$subdivision != "Todos") data <- data %>% filter(subdivision == input$subdivision)
if (input$class != "Todos") data <- data %>% filter(class == input$class)
if (input$order != "Todos") data <- data %>% filter(order == input$order)
if (input$family != "Todos") data <- data %>% filter(family == input$family)
if (input$scientific_name != "Todos") data <- data %>% filter(scientific_name == input$scientific_name)
# Crear una nueva columna con los enlaces
data <- data %>%
mutate(id_biota_link = paste0('<a href="', link_biota, id_biota, '" target="_blank">', id_biota, '</a>'))
return(data)  # Devolvemos la tabla filtrada
})
output$tabla_especies <- renderDataTable({
filtered_data()
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(bslib)
library(glue)
library(htmltools)
link_biota <- "https://www.biodiversidadcanarias.es/biota/especie/"
# Cargar datos
biota_data <- read_tsv("data/processed/biota_data_processed.tsv") %>%
mutate(id_biota = glue("<br><a href={link_biota}{id_biota}>{id_biota}</a>") %>% lapply(HTML))
# Agregar opción "Todos" a cada filtro
opciones_scientific_name <- c("Todos", unique(biota_data$scientific_name))
opciones_family <- c("Todos", unique(biota_data$family))
opciones_order <- c("Todos", unique(biota_data$order))
opciones_class <- c("Todos", unique(biota_data$class))
opciones_subdivision <- c("Todos", unique(biota_data$subdivision))
opciones_division <- c("Todos", unique(biota_data$division))
opciones_phylo <- c("Todos", unique(biota_data$phylo))
opciones_domain <- c("Todos", unique(biota_data$domain))
# Definir UI
ui <- page_sidebar(
title = "TABLA PARA BUSCAR ESPECIES EN BIOTA FÁCIL",
sidebar = sidebar(
"Filtros",
selectInput("domain", "Selecciona un Reino:", opciones_domain, selected = "Todos"),
selectInput("phylo", "Selecciona un Filo:", opciones_phylo, selected = "Todos"),
selectInput("division", "Selecciona una División:", opciones_division, selected = "Todos"),
selectInput("subdivision", "Selecciona una Subdivisión:", opciones_subdivision, selected = "Todos"),
selectInput("class", "Selecciona una Clase:", opciones_class, selected = "Todos"),
selectInput("order", "Selecciona un orden:", opciones_order, selected = "Todos"),
selectInput("family", "Selecciona una familia:", opciones_family, selected = "Todos"),
selectInput("scientific_name", "Selecciona un nombre científico:", opciones_scientific_name, selected = "Todos")
),
"Especies de Biota, pertenecientes BIOCAN, Gobierno de Canarias",
card(
dataTableOutput("tabla_especies")
)
)
# Definir servidor
server <- function(input, output) {
filtered_data <- reactive({
data <- biota_data  # Usamos la base de datos original
# Aplicar los filtros solo si el usuario ha seleccionado una opción diferente de "Todos"
if (input$domain != "Todos") data <- data %>% filter(domain == input$domain)
if (input$phylo != "Todos") data <- data %>% filter(phylo == input$phylo)
if (input$division != "Todos") data <- data %>% filter(division == input$division)
if (input$subdivision != "Todos") data <- data %>% filter(subdivision == input$subdivision)
if (input$class != "Todos") data <- data %>% filter(class == input$class)
if (input$order != "Todos") data <- data %>% filter(order == input$order)
if (input$family != "Todos") data <- data %>% filter(family == input$family)
if (input$scientific_name != "Todos") data <- data %>% filter(scientific_name == input$scientific_name)
return(data)  # Devolvemos la tabla filtrada
})
output$tabla_especies <- renderDataTable({
filtered_data()
})
}
shinyApp(ui = ui, server = server)
